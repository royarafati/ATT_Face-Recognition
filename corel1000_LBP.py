# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IxeOqf6gdYeXK0khDYn05PLhvUYihdM0
"""

#mount google drive
from os.path import join
from google.colab import drive

ROOT = "/content/drive"
drive.mount(ROOT)

import numpy as np
import cv2
import re
import glob
from skimage.feature import local_binary_pattern

def lbp_histogram(color_image):
    img = cv2.cvtColor(color_image, cv2.COLOR_BGR2GRAY)
    patterns = local_binary_pattern(img, 8, 1)
    n = int(patterns.max())
    hist, _ = np.histogram(patterns, bins=n, range=(0, n), density=True)

    return hist

#defining test set :
Test_set_str = ['/content/drive/MyDrive/database/0.jpg',
                '/content/drive/MyDrive/database/1.jpg',
                '/content/drive/MyDrive/database/101.jpg',
                '/content/drive/MyDrive/database/102.jpg',
                '/content/drive/MyDrive/database/201.jpg',
                '/content/drive/MyDrive/database/202.jpg',
                '/content/drive/MyDrive/database/301.jpg',
                '/content/drive/MyDrive/database/302.jpg',
                '/content/drive/MyDrive/database/401.jpg',
                '/content/drive/MyDrive/database/402.jpg',
                '/content/drive/MyDrive/database/501.jpg',
                '/content/drive/MyDrive/database/502.jpg',
                '/content/drive/MyDrive/database/601.jpg',
                '/content/drive/MyDrive/database/602.jpg',
                '/content/drive/MyDrive/database/701.jpg',
                '/content/drive/MyDrive/database/702.jpg',
                '/content/drive/MyDrive/database/801.jpg',
                '/content/drive/MyDrive/database/802.jpg',
                '/content/drive/MyDrive/database/901.jpg',
                '/content/drive/MyDrive/database/902.jpg']

#Database LBP Histogram:
total=[]
for i in glob.glob('/content/drive/MyDrive/database/*.jpg'):
    DB_Image = cv2.imread(i)
    DB_Hist = lbp_histogram(DB_Image)
    DB_Hist = np.array(DB_Hist, dtype=np.float32)
    total.append([DB_Hist,f'{i}'])

total_compare=[]
for j in Test_set_str:
  query_image = cv2.imread(j)
  query_feature = lbp_histogram(query_image)
  total_score = []
  for l in range(len(total)):
    Score = cv2.compareHist(np.float32(total[l][0]),np.float32(query_feature), cv2.HISTCMP_CHISQR)
    total_score.append([Score,total[l][1]])
  total_score.sort()
  total_compare.append(total_score)

total_count=0
for i in range(20):
  temp = re.findall(r'\d+', Test_set_str[i])
  Img_number = list(map(int, temp)) #getting index from string for data base
  min=int(Img_number[0]/100)*100
  max=min+100 #  Start from 200 to 300
  count=0
  for k in range(20):  # number of Image for Test
    DB_str = total_compare[i][k][1]
    DB_temp = re.findall(r'\d+', DB_str)
    DB_number = list(map(int, DB_temp))
    if min<DB_number[0]<max:
      count+=1
      if k==1:
        total_count+=1
  accuracy = ((count)/20)
  print("Accuracy for image number"+ str(Img_number) + " is "+ str(accuracy))
total_accuracy = ((total_count)/20)            
print("Total Accuracy is "+ str(total_accuracy))